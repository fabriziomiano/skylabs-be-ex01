"""Endpoints definition"""import pandas as pdfrom flask import request, jsonify, abort, current_app as appfrom app import dbfrom app.api import apifrom app.models import (    Country, EducationLevel, MaritalStatus, Occupation, Race, Record,    Relationship, Sex, WorkClass)def unnormalized_records_query():    """    Return an unnormalized records query object    :return: db.session.query    """    return db.session.query(        Record,        Country.name.label('country_name'),        EducationLevel.name.label('education_level_name'),        MaritalStatus.name.label('marital_status_name'),        Occupation.name.label('occupation_name'),        Race.name.label('race_name'),        Relationship.name.label('relationship_name'),        Sex.name.label('sex_name'),        WorkClass.name.label('workclass_name')    ).join(Country). \        join(EducationLevel). \        join(MaritalStatus). \        join(Occupation). \        join(Race). \        join(Relationship). \        join(Sex). \        join(WorkClass)@api.route('/records')@api.route('/records/page/<int:page>')def get_unnormalized_records(page=None):    """    Return a JSON-formatted list of records.    Examples:        - for all the records        /records        - for parametric pagination        /records/page/<page>?per_page=<per_page>            page: int            per_page: int, optional: defaults to 25 if not specified    :param page: int    :return: string    """    app.logger.info("Received all records request")    query = unnormalized_records_query()    if page is not None:        if page < 1:            abort(404)        try:            per_page = int(request.args.get("per_page"))        except TypeError:            per_page = 25        query = unnormalized_records_query()        query = query.limit(per_page).offset((page - 1) * per_page)    df = pd.read_sql(query.statement, query.session.bind)    if df.empty:        abort(404)    return jsonify(*df.to_dict(orient='records'))